// Generated by CoffeeScript 1.8.0
(function() {
  var Query, badStarts, correctLink, hrefsFromText, matches, onKeyUp, openAnchor, openAnchorNewWindow, submitQuery, testHREF,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  matches = function(inputstring, text) {
    var regParts, regexp;
    regParts = inputstring.match(/^\/(.*?)\/([gim]*)$/);
    if (regParts) {
      regexp = new RegExp(regParts[1], regParts[2]);
    } else {
      regexp = new RegExp(inputstring);
    }
    return text.match(regexp);
  };

  window.tabUrl = "";

  badStarts = ["chrome-extension", "mailto", "ftp", "#", "javascript"];

  testHREF = function(href) {
    var start, _i, _len;
    if (!href) {
      return false;
    }
    for (_i = 0, _len = badStarts.length; _i < _len; _i++) {
      start = badStarts[_i];
      if (href.indexOf(start) === 0) {
        return false;
      }
    }
    return true;
  };

  hrefsFromText = function(text) {
    var doc, href, hrefs, i, links;
    doc = document.createElement("html");
    doc.innerHTML = text;
    links = doc.getElementsByTagName("a");
    hrefs = [];
    i = 0;
    while (i < links.length) {
      href = links[i].getAttribute("href");
      if (href === null) {
        i++;
        continue;
      }
      if (!testHREF(href)) {
        i++;
        continue;
      }
      hrefs.push(href);
      i++;
    }
    return hrefs;
  };

  correctLink = function(base, link) {
    var rebase;
    if ((link.indexOf("http") !== 0) && (link.indexOf("//") !== 0)) {
      if (link.indexOf("/") !== 0) {
        link = base + link;
      } else {
        rebase = base.split('/');
        rebase = rebase[0] + '//' + rebase[2];
        link = rebase + link;
      }
    }
    return link;
  };

  openAnchor = function(ev) {
    chrome.tabs.create({
      url: ev.target.href
    });
  };

  openAnchorNewWindow = function(ev) {
    chrome.windows.create({
      url: ev.target.href
    });
  };

  window.qs = 0;

  Query = (function() {
    function Query(greb, insensitive, recurse, all, match) {
      this.greb = greb;
      this.insensitive = insensitive;
      this.recurse = recurse;
      this.all = all;
      this.match = match;
      this.testText = __bind(this.testText, this);
      this.appendLinkToPopupDOM = __bind(this.appendLinkToPopupDOM, this);
      this.run = __bind(this.run, this);
      this.get = __bind(this.get, this);
      this.renderInElement = __bind(this.renderInElement, this);
      this.seenLinks = new Set();
    }

    Query.prototype.renderInElement = function(element) {
      var h4;
      this.innerResults = document.createElement("div");
      h4 = document.createElement("h4");
      h4.appendChild(document.createTextNode(this.greb + (this.insensitive ? " -i" : "") + (this.recurse ? " -r " + this.recurse : "") + (this.all ? " -a" : "") + (this.match ? " -m " + this.match : "")));
      this.innerResults.appendChild(h4);
      return element.insertBefore(this.innerResults, element.firstChild);
    };

    Query.prototype.get = function(link, cb) {
      var isPDF, req;
      if (link.indexOf("http") !== 0) {
        return;
      }
      window.qs += 1;
      isPDF = link.indexOf(".pdf", link.length - 4) !== -1;
      if (isPDF) {
        return (new Pdf2Text()).pdfToText(link, (function() {}), function(text) {
          return cb(link, text);
        });
      } else {
        req = new XMLHttpRequest();
        req.open("GET", link);
        req.send(null);
        return req.onreadystatechange = function() {
          if (req.readyState === 4 && req.status === 200) {
            return cb(link, req.responseText);
          }
        };
      }
    };

    Query.prototype.run = function(base, links, r) {
      var self;
      self = this;
      links = new Set(links);
      return links.forEach(function(link) {
        var potential;
        link = correctLink(base, link);
        if (self.seenLinks.has(link)) {
          return;
        }
        self.seenLinks.add(link);
        potential = matches(self.match, link);
        if (potential || r < self.recurse) {
          return self.get(link, function(slink, stext) {
            var cb, found, sublinks;
            cb = potential ? self.appendLinkToPopupDOM : function() {};
            found = self.testText(slink, stext, cb);
            if ((!found) && (!self.all)) {
              return;
            }
            sublinks = hrefsFromText(stext);
            if (r < self.recurse) {
              if ((slink.indexOf("http") === 0) || (slink.indexOf("//") === 0)) {
                base = slink.replace(slink.substr(slink.lastIndexOf('/') + 1), '');
              } else {
                base = tabUrl;
              }
              return self.run(base, sublinks, r + 1);
            }
          });
        }
      });
    };

    Query.prototype.appendLinkToPopupDOM = function(link) {
      var a;
      a = document.createElement("a");
      a.appendChild(document.createTextNode(link));
      a.setAttribute("href", link);
      a.addEventListener("click", openAnchor);
      a.addEventListener("contextmenu", openAnchorNewWindow);
      this.innerResults.appendChild(a);
      return this.innerResults.appendChild(document.createElement("br"));
    };

    Query.prototype.testText = function(link, text, cb) {
      var flags, greb, re, self;
      text = text.replace(/<(?:.|\n)*?>/gm, ' ');
      self = this;
      greb = self.greb;
      flags = "gm";
      if (this.insensitive) {
        text = text.toLowerCase();
        flags += "i";
      }
      re = new RegExp(greb, flags);
      if (re.test(text)) {
        cb(link);
        return true;
      }
      return false;
    };

    return Query;

  })();

  window.allLinks = [];

  submitQuery = function() {
    var all, greb, insensitive, match, recurse;
    greb = document.getElementById("greb").value;
    insensitive = document.getElementById("i").checked;
    recurse = parseInt(document.getElementById("r").value) || 1;
    all = false;
    match = document.getElementById("m").value || "";
    window.query = new Query(greb, insensitive, recurse, all, match);
    query.renderInElement(document.getElementById("results"));
    query.run(tabUrl, allLinks, 1);
  };

  onKeyUp = function(ev) {
    if (ev.which === 13) {
      submitQuery();
    }
  };

  chrome.extension.onRequest.addListener(function(links) {
    var index;
    for (index in links) {
      allLinks.push(links[index]);
    }
  });

  window.onload = function() {
    var results;
    results = document.getElementById("results");
    document.getElementById("greb").onkeyup = onKeyUp;
    document.getElementById("r").onkeyup = onKeyUp;
    document.getElementById("i").onkeyup = onKeyUp;
    document.getElementById("m").onkeyup = onKeyUp;
    chrome.tabs.getSelected(null, function(tab) {
      window.tabUrl = tab.url;
      return window.tabUrl = tabUrl.replace(tabUrl.substr(tabUrl.lastIndexOf('/') + 1), '');
    });
    chrome.windows.getCurrent(function(currentWindow) {
      chrome.tabs.query({
        active: true,
        windowId: currentWindow.id
      }, function(activeTabs) {
        chrome.tabs.executeScript(activeTabs[0].id, {
          file: "send_links.js",
          allFrames: true
        });
      });
    });
  };

}).call(this);
