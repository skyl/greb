// Generated by CoffeeScript 1.8.0
(function() {
  var Query, hrefsFromText, matches, onKeyUp, openAnchor, openAnchorNewWindow, submitQuery,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  matches = function(inputstring, text) {
    var regParts, regexp;
    regParts = inputstring.match(/^\/(.*?)\/([gim]*)$/);
    if (regParts) {
      regexp = new RegExp(regParts[1], regParts[2]);
    } else {
      regexp = new RegExp(inputstring);
    }
    return text.match(regexp);
  };

  hrefsFromText = function(text) {
    var doc, href, hrefs, i, links;
    doc = document.createElement("html");
    doc.innerHTML = text;
    links = doc.getElementsByTagName("a");
    hrefs = [];
    i = 0;
    while (i < links.length) {
      href = links[i].getAttribute("href");
      if (href && href.indexOf("http") === 0) {
        hrefs.push(href);
      }
      i++;
    }
    return hrefs;
  };

  openAnchor = function(ev) {
    chrome.tabs.create({
      url: ev.target.href
    });
  };

  openAnchorNewWindow = function(ev) {
    chrome.windows.create({
      url: ev.target.href
    });
  };

  Query = (function() {
    function Query(greb, insensitive, recurse, match) {
      this.greb = greb;
      this.insensitive = insensitive;
      this.recurse = recurse;
      this.match = match;
      this.testText = __bind(this.testText, this);
      this.run = __bind(this.run, this);
      this.get = __bind(this.get, this);
      this.renderInElement = __bind(this.renderInElement, this);
    }

    Query.prototype.renderInElement = function(element) {
      var h4;
      this.innerResults = document.createElement("div");
      h4 = document.createElement("h4");
      console.log(this.greb, this.insensitive, this.recurse);
      h4.appendChild(document.createTextNode(this.greb + (this.insensitive ? " -i" : "") + (this.recurse ? " r(" + this.recurse + ")" : "")));
      this.innerResults.appendChild(h4);
      return element.insertBefore(this.innerResults, element.firstChild);
    };

    Query.prototype.get = function(link, cb) {
      var req;
      req = new XMLHttpRequest();
      req.open("GET", link);
      req.send(null);
      return req.onreadystatechange = function() {
        if (req.readyState === 4 && req.status === 200) {
          return cb(link, req.responseText);
        }
      };
    };

    Query.prototype.run = function(links) {
      var self;
      self = this;
      self.sLinks = new Set(links);
      return self.sLinks.forEach(function(link) {
        if (matches(self.match, link)) {
          return self.get(link, function(slink, stext) {
            return self.testText(slink, stext, 1);
          });
        }
      });
    };

    Query.prototype.appendLinkToPopupDOM = function(link) {
      var a;
      a = document.createElement("a");
      a.appendChild(document.createTextNode(link));
      a.setAttribute("href", link);
      a.addEventListener("click", openAnchor);
      a.addEventListener("contextmenu", openAnchorNewWindow);
      this.innerResults.appendChild(a);
      return this.innerResults.appendChild(document.createElement("br"));
    };

    Query.prototype.testText = function(link, text, r) {
      var greb, i, self, subLinks;
      self = this;
      greb = self.greb;
      if (this.insensitive) {
        text = text.toLowerCase();
        greb = greb.toLowerCase();
      }
      if (text.indexOf(greb) > -1) {
        self.appendLinkToPopupDOM(link);
        if (r < this.recurse) {
          subLinks = hrefsFromText(text);
          i = subLinks.length - 1;
          while (i >= 0) {
            link = subLinks[i];
            if (self.sLinks.has(link)) {
              i--;
              continue;
            }
            self.sLinks.add(link);
            if (matches(self.match, link)) {
              self.get(link, function(slink, stext) {
                self.testText(slink, stext, r + 1);
              });
            }
            i--;
          }
        }
      }
    };

    return Query;

  })();

  window.allLinks = [];

  submitQuery = function() {
    var greb, insensitive, match, query, recurse;
    greb = document.getElementById("greb").value;
    insensitive = document.getElementById("i").checked;
    recurse = parseInt(document.getElementById("r").value) || 1;
    match = document.getElementById("m").value || "";
    query = new Query(greb, insensitive, recurse, match);
    query.renderInElement(document.getElementById("results"));
    query.run(allLinks);
  };

  onKeyUp = function(ev) {
    if (ev.which === 13) {
      submitQuery();
    }
  };

  chrome.extension.onRequest.addListener(function(links) {
    var index;
    for (index in links) {
      allLinks.push(links[index]);
    }
  });

  window.onload = function() {
    var results;
    results = document.getElementById("results");
    document.getElementById("greb").onkeyup = onKeyUp;
    document.getElementById("r").onkeyup = onKeyUp;
    document.getElementById("i").onkeyup = onKeyUp;
    document.getElementById("m").onkeyup = onKeyUp;
    chrome.windows.getCurrent(function(currentWindow) {
      chrome.tabs.query({
        active: true,
        windowId: currentWindow.id
      }, function(activeTabs) {
        chrome.tabs.executeScript(activeTabs[0].id, {
          file: "send_links.js",
          allFrames: true
        });
      });
    });
  };

}).call(this);
